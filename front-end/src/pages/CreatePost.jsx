import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom';
import { preview } from "../assets";
import { getRandomPrompt } from '../utils';
import FormField from '../component/formField/FormField';
import Loader from '../component/loader/Loader';
import axios from 'axios';
import swal from 'sweetalert';
export default function CreatePost() {
  const navigate = useNavigate();
  const [form, setform] = useState({
    name: '',
    prompt: '',
    photo: ''
  });
  const [generatingImg, setgeneratingImg] = useState(false);
  const [loading, setloading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (!form.name) {
        swal({
          text: "Please provide your name.",
          icon: "info",
        });
        return;
      } else if (!form.prompt) {
        swal({
          text: "Please provide a prompt.",
          icon: "info",
        });
        return;
      }
      else if (!form.photo) {
        swal({
          text: "Please generate a photo.",
          icon: "info",
        });
        return;
      }
      let data = {
        name: form.name,
        prompt: form.prompt,
        photo: form.photo
      }
      setloading(true)
      await axios({
        method: "POST",
        url: "http://localhost:3003/api/v1/posts",
        data: data,
        headers: {
          "Content-Type": "application/json",
        }
      }).then(response => {
        if (response.status == 201) {
          navigate('/')
        }
      }).catch(error => {
        swal({
          text: "Something went wrong! Please try again.",
          icon: "error",
        });
        console.log(error);
      })
    } catch (error) {
      swal({
        text: "Something went wrong! Please try again.",
        icon: "error",
      });
    } finally {
      setloading(false);
    }
  }

  const handleChange = (e) => {
    setform({ ...form, [e.target.name]: e.target.value });
  }

  const handleSurpriseMe = () => {
    const generatedPrompt = getRandomPrompt(form.prompt);
    setform({ ...form, prompt: generatedPrompt });
  }

  const generateImage = async () => {
    try {
      if (!form.prompt) {
        swal({
          title: "Info!",
          text: "Please provide a prompt",
          icon: "info",
        });
        return;
      }
      let data = {
        prompt: form.prompt
      }
      setgeneratingImg(true);
      await axios({
        method: "POST",
        url: "http://localhost:3003/api/v1/dalle",
        data: data,
      }).then(response => {
        ///console.log(response);
        if (response.status == 200) {
          let photo = response.data.data.data[0].b64_json;
          setform({ ...form, photo: `data:image/jpeg;base64,${photo}` });
        } else {
          swal({
            text: "Something went wrong!! Please try again",
            icon: "error",
          });
        }
      }).catch(error => {
        console.log(error);
        swal({
          text: "Something went wrong!! Please try again",
          icon: "error",
        });
      })
    } catch (error) {
      console.log(error)
    } finally {
      setgeneratingImg(false);
    }
  }

  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>
          Show Case
        </h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w[500px]'>
          Create imaginative and visually stunning images generated by DALL-E AI
        </p>
      </div>
      <form className="mt-16 max-w-3xl" onSubmit={handleSubmit}>
        <div className="flex flex-col gap-5">
          <FormField
            labelName="Your Name"
            type="text"
            name="name"
            value={form.name}
            placeholder="John"
            handleChange={handleChange}
          />
          <FormField
            labelName="Prompt"
            type="text"
            name="prompt"
            value={form.prompt}
            placeholder="a painting of a fox in the style of Starry Night"
            handleChange={handleChange}
            isSurpriseMe
            handleSurpriseMe={handleSurpriseMe}
          />
          <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 flex justify-center items-center">
            {
              form.photo ? (
                <img
                  src={form.photo}
                  alt={form.prompt}
                  className="w-full h-full object-contain"
                />
              ) :
                (
                  <img
                    src={preview}
                    alt="preview"
                    className="w-full h-full object-contain"
                  />
                )
            }
            {generatingImg && (
              <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                <Loader />
              </div>
            )}
          </div>
        </div>
        <div className="mt-5 flex gap-5">
          <button
            type="button"
            onClick={generateImage}
            className=" text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {generatingImg ? 'Generating...' : 'Generate'}
          </button>
        </div>

        <div className="mt-10">
          <p className="mt-2 text-[#666e75] text-[14px]">** Once you have created the image you want, you can share it with others in the community **</p>
          <button
            type="submit"
            className="mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center"
          >
            {loading ? 'Sharing...' : 'Share with the Community'}
          </button>
        </div>
      </form>
    </section>
  )
}
